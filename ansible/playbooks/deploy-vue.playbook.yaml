- name: Playbook to release Vue (Market)
  hosts: myservers
  become: yes

  vars:
      tools:
          - git
          - docker

  tasks:

    - name: Install tools
      yum:
        name: "{{ item }}"
        state: latest
      with_items: "{{ tools }}"

    - name: Start services
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Set release dir
      set_fact:
        release_dir: "/var/tmp/ARCVMarket-{{ tag }}"

    - name: Ensure release dir
      file:
        path: "{{ release_dir }}"
        state: directory

    - name: Get release
      ansible.builtin.get_url:
        url: https://github.com/neontribe/ARCVMarket/archive/refs/tags/{{ tag }}.tar.gz
        dest: /var/tmp/release.tgz
        mode: '0440'

    - name: Unpack release
      unarchive:
        src: /var/tmp/release.tgz
        dest: /var/tmp
        remote_src: yes

    - name: Set up git versions for webpack to read
      shell: |
        git init
        git config --global user.email 'ansible@neontribe.org'
        git config --global user.name "Ansible Bot"
        git commit --allow-empty --no-verify -m "chore: deploy {{ tag }}"
      args:
        chdir: "{{ release_dir }}"

    - name: Add yarn install wrapper script
      copy:
        src: assets/yarn-wrapper.sh
        dest: "{{ release_dir }}/yarn-wrapper.sh"
        group: root
        owner: root
        mode: 0755

    - name: Yarn install and build
      shell: docker run -v "{{ release_dir }}":/build:Z --entrypoint /build/yarn-wrapper.sh node:20
      args:
        executable: /bin/bash
        chdir: "{{ release_dir }}"

    - name: Clean up node modules and helper script
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ release_dir }}/yarn-wrapper.sh"
        - "{{ release_dir }}/node_modules"

    - name: Copy built files
      copy:
        src: "{{ release_dir }}/dist/"
        dest: /var/www/ARCVMarket/releases/ARCVMarket-{{ tag }}
        remote_src: yes

    - name: Check if the .htaccess file exists
      stat:
        path: /var/www/ARCVMarket//htaccess
      register: ht_access_file_status

    - name: Copy the .htaccess file if it does not exist
      copy:
        src: ../files/htaccess
        dest: /var/www/ARCVMarket//htaccess
      when: not ht_access_file_status.stat.exists

    - name: Link in htaccess
      file:
        state: link
        src: /var/www/ARCVMarket/htaccess
        dest: /var/www/ARCVMarket/releases/ARCVMarket-{{ tag }}/.htaccess

    - name: Ensure ownership
      file:
        dest: /var/www/ARCVMarket/releases/ARCVMarket-{{ tag }}
        owner: "{{ webuser }}"
        group: "{{ webuser }}"
        mode: u=rwX,g=rX,o=rX
        recurse: yes

    - name: Release it by updating public_html symlink
      file:
        state: link
        src: /var/www/ARCVMarket/releases/ARCVMarket-{{ tag }}
        dest: /var/www/ARCVMarket/public_html

    - name: Remove tools
      yum:
        name: "{{ item }}"
        state: absent
      with_items: "{{ tools }}"